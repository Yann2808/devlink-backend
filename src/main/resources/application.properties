spring.application.name=devlink-backend

# Server configuration
server.port=8080

# PostgreSQL Database configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/devlinkdb
spring.datasource.username=devlinkuser
spring.datasource.password=devlinkpassword
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate & JPA configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Logging configuration
logging.level.org.springframework=INFO
logging.level.org.hibernate.SQL=DEBUG

# Security configuration
spring.security.user.name=admin
spring.security.user.password=adminpassword

# CORS configuration
spring.web.cors.allowed-origins=http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS

# Kafka configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=devlink-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.JsonDeserializer
# Désactiver les en-têtes de type pour JSON
spring.kafka.producer.properties.spring.json.add.type.headers=false

# Clé secrète JWT (à générer et garder sécurisée, ici juste pour le développement)
# Utilisez une chaîne de caractères longue et aléatoire en production !
jwt.secret=YourSuperSecretKeyForDevLinkApplicationWhichIsAtLeast256BitsLongAndShouldBeStoredSecurelyInProductionEnvironment
jwt.expiration=86400000 # 24 heures en millisecondes (24 * 60 * 60 * 1000)
